# Positions with variance < 1 are colored red (highly conserved)
col=rep("black", length(core$volume))
col[core$volume<3]="yellow"; col[core$volume<1]="red"
plot(core, col=col)
# Print and extract indices of the core residues with variance < 1.5 Å
core.inds <- print(core, vol=1.5)
write.pdb(xyz=pdbs$xyz[1,core.inds$xyz], file="./results/FPs_core.pdb")
# Superimpose all structures using only the core atom indices for better alignment
xyz <- pdbfit( pdbs, core.inds )
rd <- rmsd(xyz)
hist(rd, breaks=40, xlab="RMSD (Å)", main="Histogram of RMSD")
rd <- rmsd(xyz, fit = TRUE, inds = core.inds$xyz)
rd <- rmsd(xyz, fit = TRUE, inds = core.inds$xyz)
sum(is.na(xyz))
valid.rows <- apply(xyz, 1, function(row) all(!is.na(row)))
xyz_clean <- xyz[valid.rows, ]
rd <- rmsd(xyz_clean, fit = TRUE)
rd <- rmsd(xyz_clean)
tor <- torsion.pdb(RFP_A)
# Basic Ramachandran plot
plot(tor$phi, tor$psi, xlab="phi", ylab="psi")
tor <- torsion.pdb(RFP_A)
# Basic Ramachandran plot
plot(tor$phi, tor$psi, xlab="phi", ylab="psi")
summary(tor$phi)
summary(tor$psi)
head(tor)
tor <- torsion.pdb(RFP)
head(tor)
# Basic Ramachandran plot
plot(tor$phi, tor$psi, xlab="phi", ylab="psi")
plot(tor$phi, tor$psi, xlab="phi", ylab="psi")
RFP <- read.pdb("1ZGO")
tor <- torsion.pdb(trim(RFP, chain = "A"))
plot(tor$phi, tor$psi, xlab="phi", ylab="psi")
tor <- torsion.pdb(trim(RFP, chain = "A"))
# Basic Ramachandran plot
plot(tor$phi, tor$psi, xlab="phi", ylab="psi")
# Locate the two structures in pdbs
ind.a <- grep("1TAG_A", pdbs$id)
ind.b <- grep("1TND_B", pdbs$id)
# Exclude gaps in the two structures to make them comparable
gaps.xyz2 <- gap.inspect(pdbs$xyz[c(ind.a, ind.b), ])
a.xyz <- pdbs$xyz[ind.a, gaps.xyz2$f.inds]
b.xyz <- pdbs$xyz[ind.b, gaps.xyz2$f.inds]
# Compare CA based pseudo-torsion angles between the two structures
a <- torsion.xyz(a.xyz, atm.inc=1)
pdb_dir <- "./FPs"
pdb_files <- list.files(pdb_dir, pattern="\\.pdb$", full.names=TRUE)
# extract PDB ID from file names
pdb_ids <- toupper(tools::file_path_sans_ext(basename(pdb_files)))
print(pdb_ids)
# annotate each structure
anno <- pdb.annotate(pdb_ids)
anno[, c("resolution", "source", "structureTitle", "citation")]
files <- list.files("FPs_chain_A", pattern = "\\.pdb$", full.names = TRUE)
files <- files[file.exists(files) & !is.na(files)]
# alignment
pdbs <- pdbaln(files, exepath = muscle.path)
# Identify the conserved core regions from the aligned structures
core <- core.find(pdbs)
# Color coding the core residues based on their positional variance (volume)
# Positions with variance < 3 are colored yellow (moderately conserved)
# Positions with variance < 1 are colored red (highly conserved)
col=rep("black", length(core$volume))
col[core$volume<3]="yellow"; col[core$volume<1]="red"
plot(core, col=col)
# Print and extract indices of the core residues with variance < 1.5 Å
core.inds <- print(core, vol=1.5)
write.pdb(xyz=pdbs$xyz[1,core.inds$xyz], file="./results/FPs_core.pdb")
# Superimpose all structures using only the core atom indices for better alignment
xyz <- pdbfit( pdbs, core.inds)
# Locate the two structures in pdbs
ind.a <- grep("1TAG_A", pdbs$id)
ind.b <- grep("1TND_B", pdbs$id)
# Exclude gaps in the two structures to make them comparable
gaps.xyz2 <- gap.inspect(pdbs$xyz[c(ind.a, ind.b), ])
a.xyz <- pdbs$xyz[ind.a, gaps.xyz2$f.inds]
b.xyz <- pdbs$xyz[ind.b, gaps.xyz2$f.inds]
# Compare CA based pseudo-torsion angles between the two structures
a <- torsion.xyz(a.xyz, atm.inc=1)
# read PDB files
apo  <- read.pdb("1CFD")
holo <- read.pdb("1DLL")
# read PDB files
apo  <- read.pdb("1CFD")
holo <- read.pdb("1DLL")
apo_A  <- trim(apo, chain = "A", elety = "CA")
holo_A <- trim(holo, chain = "A", elety = "CA")
# align sequence and strcuture
aligned <- pdbaln(list(apo, holo))
# read PDB files
apo  <- read.pdb("8BFG")
holo <- read.pdb("8BD2")
# align sequence and strcuture
aligned <- pdbaln(list(apo, holo))
xyz <- pdbfit(aligned)  # xyz matrix aligned by C-alpha atoms
# RMSD
rd <- rmsd(xyz, fit = TRUE)
print(rd)
# RMSF
rmsf_vals <- rmsf(xyz)
plot(rmsf_vals, typ="l", ylab="RMSF", xlab="Residue Index")
hist(rd, breaks=40, xlab="RMSD (Å)", main="Histogram of RMSD")
print(rd)
tor_apo  <- torsion.pdb(trim(apo, chain = "A"))
tor_holo <- torsion.pdb(trim(holo, chain = "A"))
# extract chain A
apo_A  <- trim(apo, chain = "A", elety = "CA")
holo_A <- trim(holo, chain = "A", elety = "CA")
# align sequence and strcuture
aligned <- pdbaln(list(apo, holo))
xyz <- pdbfit(aligned)  # xyz matrix aligned by C-alpha atoms
# RMSD
rd <- rmsd(xyz, fit = TRUE)
print(rd)
# RMSF
rmsf_vals <- rmsf(xyz)
plot(rmsf_vals, typ="l", ylab="RMSF", xlab="Residue Index")
plot(rmsf_vals, typ="l", sse = apo_A, ylab="RMSF", xlab="Residue Index")
# read PDB files
apo  <- read.pdb("8BFG")
holo <- read.pdb("8BD2")
apo$chain
apo$chains
View(apo)
View(apo)
apo$atom
# read PDB files
apo  <- read.pdb("8BFG")
# align sequence and strcuture
aligned <- pdbaln(list(apo, holo))
xyz <- pdbfit(aligned)  # xyz matrix aligned by C-alpha atoms
# RMSD
rd <- rmsd(xyz, fit = TRUE)
print(rd)
# RMSF
rmsf_vals <- rmsf(xyz)
plot(rmsf_vals, typ="l", ylab="RMSF", xlab="Residue Index")
sse_apo  <- dssp(apo)
sse_apo  <- stride(apo)
sse_apo  <- stride(apo)
# RMSF
rmsf_vals <- rmsf(xyz)
plot(rmsf_vals, typ="l", ylab="RMSF", xlab="Residue Index")
tor_apo  <- torsion.pdb(apo)
plot(tor$phi, tor$psi, xlab="phi", ylab="psi")
plot(tor_apo$phi, tor_apo$psi, xlab="phi", ylab="psi")
plot(tor_holo$phi, tor_holo$psi, xlab="phi", ylab="psi")
# 计算扭转角
tor_apo  <- torsion.pdb(apo)
tor_holo <- torsion.pdb(holo)
# 设置图像布局为 2 行 1 列（上下排列）
par(mfrow = c(2, 1), mar = c(4, 4, 3, 1))  # 调整边距以容纳标题
# Apo 状态 Ramachandran 图
valid_apo <- !is.na(tor_apo$phi) & !is.na(tor_apo$psi)
plot(tor_apo$phi[valid_apo], tor_apo$psi[valid_apo],
xlab = "phi", ylab = "psi", pch = 20, col = "blue",
main = "")  # 暂不添加 title
title("Apo State (Calcium-Free)", line = 2)
# Holo 状态 Ramachandran 图
valid_holo <- !is.na(tor_holo$phi) & !is.na(tor_holo$psi)
plot(tor_holo$phi[valid_holo], tor_holo$psi[valid_holo],
xlab = "phi", ylab = "psi", pch = 20, col = "red",
main = "")  # 暂不添加 title
title("Holo State (Calcium-Bound)", line = 2)
# 计算扭转角
tor_apo  <- torsion.pdb(apo)
tor_holo <- torsion.pdb(holo)
# 设置图像布局为 2 行 1 列（上下排列）
par(mfrow = c(2, 1), mar = c(4, 8, 3, 1))  # 调整边距以容纳标题
# Apo 状态 Ramachandran 图
valid_apo <- !is.na(tor_apo$phi) & !is.na(tor_apo$psi)
plot(tor_apo$phi[valid_apo], tor_apo$psi[valid_apo],
xlab = "phi", ylab = "psi", pch = 20, col = "blue",
main = "")  # 暂不添加 title
title("Apo State (Calcium-Free)", line = 2)
# Holo 状态 Ramachandran 图
valid_holo <- !is.na(tor_holo$phi) & !is.na(tor_holo$psi)
plot(tor_holo$phi[valid_holo], tor_holo$psi[valid_holo],
xlab = "phi", ylab = "psi", pch = 20, col = "red",
main = "")  # 暂不添加 title
title("Holo State (Calcium-Bound)", line = 2)
# calculate torsio
tor_apo  <- torsion.pdb(apo)
tor_holo <- torsion.pdb(holo)
par(mfrow = c(2, 1), mar = c(4, 4, 3, 1))
# Apo Ramachandran plot
valid_apo <- !is.na(tor_apo$phi) & !is.na(tor_apo$psi)
plot(tor_apo$phi[valid_apo], tor_apo$psi[valid_apo],
xlab = "phi", ylab = "psi", pch = 20, col = "blue",
main = "")
title("Apo State (Calcium-Free)", line = 2)
# Holo Ramachandran 图
valid_holo <- !is.na(tor_holo$phi) & !is.na(tor_holo$psi)
plot(tor_holo$phi[valid_holo], tor_holo$psi[valid_holo],
xlab = "phi", ylab = "psi", pch = 25, col = "red",
main = "")
title("Holo State (Calcium-Bound)", line = 2)
# calculate torsio
tor_apo  <- torsion.pdb(apo)
tor_holo <- torsion.pdb(holo)
par(mfrow = c(2, 1), mar = c(4, 4, 3, 3))
# Apo Ramachandran plot
valid_apo <- !is.na(tor_apo$phi) & !is.na(tor_apo$psi)
plot(tor_apo$phi[valid_apo], tor_apo$psi[valid_apo],
xlab = "phi", ylab = "psi", pch = 20, col = "blue",
main = "")
title("Apo State (Calcium-Free)", line = 2)
# Holo Ramachandran 图
valid_holo <- !is.na(tor_holo$phi) & !is.na(tor_holo$psi)
plot(tor_holo$phi[valid_holo], tor_holo$psi[valid_holo],
xlab = "phi", ylab = "psi", pch = 20, col = "red",
main = "")
title("Holo State (Calcium-Bound)", line = 2)
# calculate torsio
tor_apo  <- torsion.pdb(apo)
tor_holo <- torsion.pdb(holo)
par(mfrow = c(2, 1), mar = c(4, 4, 3, 1))
# Apo Ramachandran plot
valid_apo <- !is.na(tor_apo$phi) & !is.na(tor_apo$psi)
plot(tor_apo$phi[valid_apo], tor_apo$psi[valid_apo],
xlab = "phi", ylab = "psi", pch = 20, col = "blue",
main = "")
title("Apo State (Calcium-Free)", line = 2)
# Holo Ramachandran 图
valid_holo <- !is.na(tor_holo$phi) & !is.na(tor_holo$psi)
plot(tor_holo$phi[valid_holo], tor_holo$psi[valid_holo],
xlab = "phi", ylab = "psi", pch = 20, col = "red",
main = "")
title("Holo State (Calcium-Bound)", line = 2)
valid <- !is.na(tor_apo$phi) & !is.na(tor_holo$phi)
phi_diff <- tor_holo$phi[valid] - tor_apo$phi[valid]
psi_diff <- tor_holo$psi[valid] - tor_apo$psi[valid]
plot(phi_diff, type="l", ylab="Phi difference", xlab="Residue Index")
plot(psi_diff, type="l", ylab="Psi difference", xlab="Residue Index")
valid <- !is.na(tor_apo$phi) & !is.na(tor_holo$phi)
phi_diff <- tor_holo$phi[valid] - tor_apo$phi[valid]
psi_diff <- tor_holo$psi[valid] - tor_apo$psi[valid]
# 设置图形窗口为上下两个子图
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))  # 调整边距更美观
# 绘制 Phi 差异图
plot(phi_diff, type = "l", ylab = "Phi difference (°)", xlab = "Residue Index", col = "blue")
title(main = "Torsion Angle Differences", outer = FALSE, line = 1)
# 绘制 Psi 差异图
plot(psi_diff, type = "l", ylab = "Psi difference (°)", xlab = "Residue Index", col = "red")
# 添加整个图形的主标题（跨两图）
mtext("Phi/Psi Torsion Angle Differences Between Apo and Holo Calmodulin",
outer = TRUE, line = -1.5, cex = 1.2, font = 2)
valid <- !is.na(tor_apo$phi) & !is.na(tor_holo$phi)
phi_diff <- tor_holo$phi[valid] - tor_apo$phi[valid]
psi_diff <- tor_holo$psi[valid] - tor_apo$psi[valid]
# 设置图形窗口为上下两个子图
par(mfrow = c(2, 1), mar = c(4, 4, 1, 1))  # 调整边距更美观
# 绘制 Phi 差异图
plot(phi_diff, type = "l", ylab = "Phi difference (°)", xlab = "Residue Index", col = "blue")
title(main = "Torsion Angle Differences", outer = FALSE, line = 1)
# 绘制 Psi 差异图
plot(psi_diff, type = "l", ylab = "Psi difference (°)", xlab = "Residue Index", col = "red")
# 添加整个图形的主标题（跨两图）
mtext("Phi/Psi Torsion Angle Differences Between Apo and Holo Calmodulin",
outer = TRUE, line = -1.5, cex = 1.2, font = 2)
valid <- !is.na(tor_apo$phi) & !is.na(tor_holo$phi)
phi_diff <- tor_holo$phi[valid] - tor_apo$phi[valid]
psi_diff <- tor_holo$psi[valid] - tor_apo$psi[valid]
# 设置图形窗口为上下两个子图
par(mfrow = c(2, 1), mar = c(4, 4, 3, 1))  # 调整边距更美观
# 绘制 Phi 差异图
plot(phi_diff, type = "l", ylab = "Phi difference (°)", xlab = "Residue Index", col = "blue")
title(main = "Torsion Angle Differences", outer = FALSE, line = 1)
# 绘制 Psi 差异图
plot(psi_diff, type = "l", ylab = "Psi difference (°)", xlab = "Residue Index", col = "red")
# 添加整个图形的主标题（跨两图）
mtext("Phi/Psi Torsion Angle Differences Between Apo and Holo Calmodulin",
outer = TRUE, line = -1.5, cex = 1.2, font = 2)
valid <- !is.na(tor_apo$phi) & !is.na(tor_holo$phi)
phi_diff <- tor_holo$phi[valid] - tor_apo$phi[valid]
psi_diff <- tor_holo$psi[valid] - tor_apo$psi[valid]
# 设置图形窗口为上下两个子图
par(mfrow = c(2, 1), mar = c(4, 4, 4, 1))  # 调整边距更美观
# 绘制 Phi 差异图
plot(phi_diff, type = "l", ylab = "Phi difference (°)", xlab = "Residue Index", col = "blue")
title(main = "Torsion Angle Differences", outer = FALSE, line = 1)
# 绘制 Psi 差异图
plot(psi_diff, type = "l", ylab = "Psi difference (°)", xlab = "Residue Index", col = "red")
# 添加整个图形的主标题（跨两图）
mtext("Phi/Psi Torsion Angle Differences Between Apo and Holo Calmodulin",
outer = TRUE, line = -1.5, cex = 1.2, font = 2)
valid <- !is.na(tor_apo$phi) & !is.na(tor_holo$phi)
phi_diff <- tor_holo$phi[valid] - tor_apo$phi[valid]
psi_diff <- tor_holo$psi[valid] - tor_apo$psi[valid]
# 设置图形窗口为上下两个子图
par(mfrow = c(1, 1), mar = c(4, 4, 4, 1))  # 调整边距更美观
# 绘制 Phi 差异图
plot(phi_diff, type = "l", ylab = "Phi difference (°)", xlab = "Residue Index", col = "blue")
title(main = "Torsion Angle Differences", outer = FALSE, line = 1)
# 绘制 Psi 差异图
plot(psi_diff, type = "l", ylab = "Psi difference (°)", xlab = "Residue Index", col = "red")
# 添加整个图形的主标题（跨两图）
mtext("Phi/Psi Torsion Angle Differences Between Apo and Holo Calmodulin",
outer = TRUE, line = -1.5, cex = 1.2, font = 2)
valid <- !is.na(tor_apo$phi) & !is.na(tor_holo$phi)
phi_diff <- tor_holo$phi[valid] - tor_apo$phi[valid]
psi_diff <- tor_holo$psi[valid] - tor_apo$psi[valid]
# Phi difference plot
plot(phi_diff, type = "l", ylab = "Phi difference (°)", xlab = "Residue Index", col = "blue")
title(main = "Torsion Angle Differences", outer = FALSE, line = 1)
# 绘制 Psi 差异图
plot(psi_diff, type = "l", ylab = "Psi difference (°)", xlab = "Residue Index", col = "red")
title(main = "Torsion Angle Differences", outer = FALSE, line = 1)
gaps.res <- gap.inspect(aligned$ali)
gaps.pos <- gap.inspect(aligned$xyz)
id = grep("8EFG", pdbs$id)
# 提取所有 C-alpha 原子坐标（注意是非对齐版本）
ca_apo  <- trim(apo, chain = "A", elety = "CA")
ca_holo <- trim(holo, chain = "A", elety = "CA")
dm_apo  <- dm(ca_apo$xyz)
dm_holo <- dm(ca_holo$xyz)
# 差异矩阵
dm_diff <- dm_holo - dm_apo
a <- dm.xyz(a.xyz)
a <- dm.xyz(apo.xyz)
a
a
a <- dm.xyz(a.xyz)
b <- dm.xyz(b.xyz)
plot.dmat( (a - b), nlevels=10, grid.col="gray", xlab="1tag", ylab="1tnd")
# Read in the two PDB structures (Calmodulin Apo and Holo)
apo  <- read.pdb("8BFG")
holo <- read.pdb("8BD2")
# Multiple structure alignment
pdbs <- pdbaln(list(apo, holo))
# Ignore gap containing positions
gaps.res <- gap.inspect(pdbs$ali)
gaps.pos <- gap.inspect(pdbs$xyz)
# Choose apo as reference and trim to gap-free residues
id <- grep("apo", pdbs$id)
ref.pdb <- trim.pdb(apo_A, inds = atom.select(apo_A, resno = pdbs$resno[id, gaps.res$f.inds]))
# RMSF on gap-free positions
rf <- rmsf(pdbs$xyz[, gaps.pos$f.inds])
plot.bio3d(rf, resno = ref.pdb, sse = ref.pdb, ylab = "RMSF (\u00c5)", xlab = "Residue No.", typ = "l")
# Choose apo as reference and trim to gap-free residues
id <- grep("apo", pdbs$id)
ref.pdb <- trim.pdb(apo_A, inds = atom.select(apo_A, resno = pdbs$resno[id, gaps.res$f.inds]))
# RMSF on gap-free positions
rf <- rmsf(pdbs$xyz[, gaps.pos$f.inds])
plot.bio3d(rf, resno = ref.pdb, sse = ref.pdb, ylab = "RMSF (\u00c5)", xlab = "Residue No.", typ = "l")
# Identify indices for the two structures
i.apo  <- grep("apo", pdbs$id)
i.holo <- grep("holo", pdbs$id)
# Exclude gap positions for fair comparison
gaps.xyz2 <- gap.inspect(pdbs$xyz[c(i.apo, i.holo), ])
xyz.apo  <- pdbs$xyz[i.apo, gaps.xyz2$f.inds]
xyz.holo <- pdbs$xyz[i.holo, gaps.xyz2$f.inds]
# Pseudo-torsion angle comparison (CA trace)
tor.apo <- torsion.xyz(xyz.apo, atm.inc = 1)
tor.holo <- torsion.xyz(xyz.holo, atm.inc = 1)
diff.tor <- wrap.tor(tor.holo - tor.apo)
diff.tor[is.na(diff.tor)] <- 0
# Plot torsion difference
plot.bio3d(abs(diff.tor), resno = ref.pdb, sse = ref.pdb, typ = "h", xlab = "Residue No.", ylab = "Torsion Difference (rad)")
# Distance matrix comparison
dm.apo  <- dm.xyz(xyz.apo)
dm.holo <- dm.xyz(xyz.holo)
plot.dmat(dm.holo - dm.apo, nlevels = 10, grid.col = "gray", xlab = "Holo", ylab = "Apo")
core <- core.find(aligned)
col=rep("black", length(core$volume))
col[core$volume<2]="pink"; col[core$volume<1]="red"
plot(core, col=col)
sessionInfo()
library(bio3d)
# get structure from PDB server
RFP <- read.pdb("1ZGO") # 1ZGO.pdb is the PDB file of a red fluorescent protein (dsRed)
RFP
# can find out the attributes of an object by:
attributes(RFP)
# can access individual attributes by object_name$attribute_name
print(RFP$atom) # show each atom's information
print(RFP$helix)
print(RFP$sheet)
print(RFP$calpha) # the bool values show whether an atom is C alpha atom
# Print $atom data for the first two atoms
RFP$atom[1:2, ]
# Print a subset of $atom data for the first two atoms
RFP$atom[1:2, c("eleno", "elety", "resid", "x", "y", "z")]
# extract all information about chain A
RFP_A <- trim(RFP, chain = "A", elety = "CA")
# extract B-factors of atoms on chain A
b_chain_A <- RFP_A$atom$b
# plot
plot.bio3d(b_chain_A, sse = RFP_A, typ = "l", ylab = "B-factor (Chain A)")
tor <- torsion.pdb(trim(RFP, chain = "A"))
# Basic Ramachandran plot
plot(tor$phi, tor$psi, xlab="phi", ylab="psi")
# select indices for all Ca atoms
ca.inds <- atom.select(RFP, "calpha")
print(ca.inds)
# print details of all Ca atoms
print(RFP$atom[ca.inds$atom, ])
# print xyz coordinates of first few Ca
head(RFP$xyz[ ,ca.inds$xyz])
# select chain A
a.inds <- atom.select(RFP, chain = "A")
# select Ca atoms on Chain A
aca.inds <- atom.select(RFP, "calpha", chain = "A")
# Combine multiple selection criteria
cab.inds <- atom.select(RFP, chain = "A", elety = c("CA", "CB"), resno = 10:20)
cb30.inds <- atom.select(RFP, chain = "A", elety = "CB", resno = 30 )
nowater.inds <- atom.select(RFP, "water", inverse = TRUE)
# select protein and GDP
sele <- atom.select(RFP, "protein", resid = "GDP", operator = "OR")
protein.inds <- atom.select(RFP, "protein")
gdp.inds <- atom.select(RFP, resid = "GDP")
sele <- combine.select(protein.inds, gdp.inds, operator = "OR")
backbone.inds <- atom.select(RFP_A, "back")
help("trim.pdb")
backbone_pdb <- trim.pdb(RFP_A, backbone.inds, sse = "TRUE")
write.pdb(backbone_pdb, file = "1ZGO_BB.pdb")
# these are some normal green fluorescent proteins
ids <- c("1GFL_A","2B3P_A","2Y0G_A","1QYO_A")
raw.files <- get.pdb(ids)
files <- pdbsplit(raw.files, ids)
GFPs <- pdbaln(files)
GFPs$id <- substr(basename(GFPs$id), 1, 4)
seqidentity(GFPs)
rmsd(GFPs, fit=TRUE) # fit=TRUE: superimpose all structures to a reference before computing RMSD
pdb_dir <- "./FPs"
pdb_files <- list.files(pdb_dir, pattern="\\.pdb$", full.names=TRUE)
# extract PDB ID from file names
pdb_ids <- toupper(tools::file_path_sans_ext(basename(pdb_files)))
print(pdb_ids)
# annotate each structure
anno <- pdb.annotate(pdb_ids)
anno[, c("resolution", "source", "structureTitle", "citation")]
# extract chian A from each raw PDB files
output_dir <- "FPs_chain_A"
dir.create(output_dir, showWarnings = FALSE)
files <- list.files(pdb_dir, pattern = "\\.pdb$", full.names = TRUE)
for (f in files) {
cat("Processing:", basename(f), "\n")
pdb <- tryCatch(read.pdb(f), error = function(e) NULL)
if (is.null(pdb)) {
cat(" - Skipping: read.pdb failed\n")
next
}
pdb_A <- tryCatch(trim(pdb, chain = "A", elety = "CA"), error = function(e) NULL)
if (is.null(pdb_A) || is.null(pdb_A$atom) || nrow(pdb_A$atom) == 0) {
cat(" - Skipping: no A chain or no CA atoms\n")
next
}
out_path <- file.path(output_dir, basename(f))
tryCatch({
write.pdb(pdb_A, file = out_path)
}, error = function(e) {
cat(" - Failed to write:", basename(f), "\n")
})
}
files <- list.files("FPs_chain_A", pattern = "\\.pdb$", full.names = TRUE)
files <- files[file.exists(files) & !is.na(files)]
# alignment
pdbs <- pdbaln(files, exepath = muscle.path)
# Identify the conserved core regions from the aligned structures
core <- core.find(pdbs)
# Color coding the core residues based on their positional variance (volume)
# Positions with variance < 3 are colored yellow (moderately conserved)
# Positions with variance < 1 are colored red (highly conserved)
col=rep("black", length(core$volume))
col[core$volume<3]="yellow"; col[core$volume<1]="red"
plot(core, col=col)
# Print and extract indices of the core residues with variance < 1.5 Å
core.inds <- print(core, vol=1.5)
write.pdb(xyz=pdbs$xyz[1,core.inds$xyz], file="./results/FPs_core.pdb")
# Superimpose all structures using only the core atom indices for better alignment
xyz <- pdbfit( pdbs, core.inds)
# read PDB files
apo  <- read.pdb("8BFG")
holo <- read.pdb("8BD2")
# align sequence and strcuture
aligned <- pdbaln(list(apo, holo))
xyz <- pdbfit(aligned)  # xyz matrix aligned by C-alpha atoms
# RMSD
rd <- rmsd(xyz, fit = TRUE)
print(rd)
# RMSF
rmsf_vals <- rmsf(xyz)
plot(rmsf_vals, typ="l", ylab="RMSF", xlab="Residue Index")
# calculate torsion
tor_apo  <- torsion.pdb(apo)
tor_holo <- torsion.pdb(holo)
par(mfrow = c(2, 1), mar = c(4, 4, 3, 1))
# Apo Ramachandran plot
valid_apo <- !is.na(tor_apo$phi) & !is.na(tor_apo$psi)
plot(tor_apo$phi[valid_apo], tor_apo$psi[valid_apo],
xlab = "phi", ylab = "psi", pch = 20, col = "blue",
main = "")
title("Apo State (Calcium-Free)", line = 2)
# Holo Ramachandran plot
valid_holo <- !is.na(tor_holo$phi) & !is.na(tor_holo$psi)
plot(tor_holo$phi[valid_holo], tor_holo$psi[valid_holo],
xlab = "phi", ylab = "psi", pch = 20, col = "red",
main = "")
title("Holo State (Calcium-Bound)", line = 2)
valid <- !is.na(tor_apo$phi) & !is.na(tor_holo$phi)
phi_diff <- tor_holo$phi[valid] - tor_apo$phi[valid]
psi_diff <- tor_holo$psi[valid] - tor_apo$psi[valid]
# Phi difference plot
plot(phi_diff, type = "l", ylab = "Phi difference (°)", xlab = "Residue Index", col = "blue")
title(main = "Torsion Angle Differences", outer = FALSE, line = 1)
# Psi difference plot
plot(psi_diff, type = "l", ylab = "Psi difference (°)", xlab = "Residue Index", col = "red")
title(main = "Torsion Angle Differences", outer = FALSE, line = 1)
sessionInfo()
